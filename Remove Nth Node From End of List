/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL) return NULL;
        ListNode *faster=head, *slower=head;
        for(int i=0; i<n; i++){
            faster=faster->next;
        }
        if(faster == NULL) {
            ListNode *tmp = head;
            head=head->next;
            delete tmp;
            return head;
        }
        while(faster->next != NULL) {
            faster = faster->next;
            slower = slower->next;
        }
        ListNode *tmp = slower->next;
        slower->next = slower->next->next;
        delete tmp;
        return head;
    }
};

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
            if(head == null) return null;
            ListNode faster = head, slower = head;
            for(int i=0; i<n; i++){
                faster = faster.next;
            }
            if(faster == null){
                head = head.next;
                return head;
            }
            while(faster.next!=null){
                faster = faster.next;
                slower = slower.next;
            }
            slower.next = slower.next.next;
            return head;
    }
}
