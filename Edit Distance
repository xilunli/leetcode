class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        vector<vector<int>> ans(n+1, vector<int>(m+1));
        for(int i = 0; i< n+1; i++) {
            for(int j = 0; j < m+1; j++) {
                if(i == 0) {
                    ans[i][j] = j;
                } else if(j == 0) {
                    ans[i][j] = i;
                } else if(word1[i-1] == word2[j-1]) {
                    ans[i][j] = min(ans[i-1][j-1], min(ans[i][j-1] + 1, ans[i-1][j] + 1));
                } else {
                    ans[i][j] = min(ans[i-1][j-1] + 1, min(ans[i][j-1] + 1, ans[i-1][j] + 1));
                }
            }
        }
        return ans[n][m];
    }
};



public class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int[][] ans = new int[n+1][m+1];
        for(int i = 0; i < n+1; i++) {
            for(int j = 0; j < m+1; j++) { 
                if(i == 0) {
                  ans[i][j] = j;  
                } else if (j == 0) {
                    ans[i][j] = i;  
                } else if(word1.charAt(i-1) == word2.charAt(j-1)) {
                    ans[i][j] = Math.min(ans[i-1][j-1], Math.min(ans[i][j-1]+1, ans[i-1][j]+1));
                } else {
                    ans[i][j] = Math.min(ans[i-1][j-1]+1, Math.min(ans[i][j-1]+1, ans[i-1][j] +1));
                }
            }
        }
        return ans[n][m];
    }
}
