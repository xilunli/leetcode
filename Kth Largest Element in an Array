class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int start = 0, end = nums.size() - 1;
        while(true) {
            int index = partition(nums, start, end);
            if(index < k - 1) {
                start = index + 1;
            } else if( index > k - 1) {
                end = index - 1;
            } else {
                return nums[index];
            }
        }
        
    }
    
   int partition(vector<int>& nums, int start, int end) {
        int pivot = nums[start];
        int left = start+1, right = end;
        while (left <= right) {
            if (nums[left] < pivot && nums[right] > pivot)
                swap(nums[left++], nums[right--]);
            if (nums[left] >= pivot) left++; 
            if (nums[right] <= pivot) right--;
        }
        swap(nums[start], nums[right]);
        return right;
    }
};




public class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums.length == 1) {
            return nums[0];
        }
        int start = 0, end = nums.length - 1;
        while(true) {
            int index = partition(nums, start, end);
            if(index < k - 1) {
                start = index + 1;
            } else if( index > k - 1) {
                end = index - 1;
            } else {
                return nums[index];
            }
        }
        
    }
    
   public int partition(int[] nums, int start, int end) {
        int pivot = nums[start];
        int left = start+1, right = end;
        while (left <= right) {
            while(left <= right && nums[left] > pivot) {
                left++;
            }
            while(left <= right && nums[right] < pivot) {
                right--;
            }
            if(left <= right) {
                swap(nums, left, right);
                left++;
                right--;
            }
        }
        swap(nums, start, right);
        return right;
    }
    public void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
