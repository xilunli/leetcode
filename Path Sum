/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if(root == NULL) return false;
        //if(root->val == sum) return true;
        vector<TreeNode*> prevNodes = {root};
        vector<int> prevSum = {root->val};
        while(prevNodes.size()!=0) {
            int numNodes = prevNodes.size();
            vector<TreeNode*> currNodes;
            vector<int> currSum;
            for(int i=0; i<numNodes; i++){
                if(!prevNodes[i]->left && !prevNodes[i]->right && prevSum[i] == sum) return true;
                if(prevNodes[i]->left != NULL) {
                    int tempSum = prevSum[i]+prevNodes[i]->left->val;
                    currNodes.push_back(prevNodes[i]->left);
                    currSum.push_back(tempSum);
                }
                if(prevNodes[i]->right != NULL) {
                    int tempSum = prevSum[i]+prevNodes[i]->right->val;
                    currNodes.push_back(prevNodes[i]->right);
                    currSum.push_back(tempSum);
                }
            }
            prevNodes = currNodes;
            prevSum = currSum;
        }
        return false;
    }
};


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) return false;
        sum -= root.val;
        if(root.left==null && root.right==null && sum==0) return true;
        if(root.left!=null && hasPathSum(root.left, sum)) return true;
        if(root.right!=null && hasPathSum(root.right, sum)) return true;
        return false;   
    }
}
