class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int length = nums1.size() + nums2.size();
        if(length % 2 == 1) {
            return findKth(nums1, nums2, length/2 + 1, 0, 0);
        } else {
            return (findKth(nums1, nums2, length/2, 0, 0) + findKth(nums1, nums2, length/2 + 1, 0, 0))/2.0;
        }
    }
    
    int findKth(vector<int>& nums1, vector<int>& nums2, int k, int aStart, int bStart) {
        if(aStart >= nums1.size()) {
            return nums2[bStart + k - 1];
        }
        if(bStart >= nums2.size()) {
            return nums1[aStart + k - 1];
        }
        if(k == 1) {
            return min(nums1[aStart], nums2[bStart]);
        }
        int aValue = aStart + k/2 - 1 < nums1.size()? nums1[aStart + k/2 - 1]: INT_MAX;
        int bValue = bStart + k/2 - 1 < nums2.size()? nums2[bStart + k/2 - 1]: INT_MAX;
        if(aValue < bValue) {
            return findKth(nums1, nums2, k-k/2, aStart + k/2, bStart);
        } else {
            return findKth(nums1, nums2, k-k/2, aStart, bStart + k/2);
        }
    }
};



public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length = nums1.length + nums2.length;
        if(length % 2 == 1) {
            return findKth(nums1, nums2, length/2 + 1, 0, 0);
        } else {
            return (findKth(nums1, nums2, length/2, 0, 0) + findKth(nums1, nums2, length/2 + 1, 0, 0))/2.0;
        }
    }
    
    private int findKth(int[] nums1, int[] nums2, int k, int aStart, int bStart) {
        if(nums1.length <= aStart ) {
            return nums2[bStart + k - 1];
        }
        if(nums2.length <= bStart) {
            return nums1[aStart + k - 1];
        }
        if(k == 1) {
            return Math.min(nums1[aStart], nums2[bStart]);
        }
        int aValue = aStart + k/2 - 1 < nums1.length? nums1[aStart + k/2 - 1]:Integer.MAX_VALUE;
        int bValue = bStart + k/2 - 1 < nums2.length? nums2[bStart + k/2 - 1]:Integer.MAX_VALUE;
        if(aValue < bValue) {
            return findKth(nums1, nums2, k-k/2, aStart + k/2, bStart);
        } else {
            return findKth(nums1, nums2, k-k/2, aStart, bStart + k/2);
        }
        
    }
}
