class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        int start = matrix[0][0], end = matrix[n-1][n-1];
        while(start < end){
            int mid = start + (end - start)/2;
            int cnt = countLessThanMid(matrix, mid, n);
            if(cnt < k) {
                start = mid+1;
            } else {
                end = mid;
            }
        }
        return start;
        
    }
    int countLessThanMid(vector<vector<int>>& matrix, int mid, int n) {
        int i = n - 1, j=0;
        int cnt = 0;
        while(i >= 0 && j < n) {
            if(matrix[i][j] <= mid) {
                cnt += i+1;
                j++;
            } else {
                i--;
            }
        }
        return cnt;
    }
};


public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int start = matrix[0][0], end = matrix[n-1][n-1];
        while(start < end){
            int mid = start + (end - start)/2;
            int cnt = countLessThanMid(matrix, mid, n);
            if(cnt < k) {
                start = mid+1;
            } else {
                end = mid;
            }
        }
        return start;
        
    }
    private int countLessThanMid(int[][] matrix, int mid, int n) {
        int i = n - 1, j=0;
        int cnt = 0;
        while(i >= 0 && j <n) {
            if(matrix[i][j] <= mid) {
                cnt += i+1;
                j++;
            } else {
                i--;
            }
        }
        return cnt;
    }
}
