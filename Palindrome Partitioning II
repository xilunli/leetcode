class Solution {
public:
    int minCut(string s) {
        int n = s.size();
        vector<int> ans(n+1);
        vector<vector<bool>> isPalindrome(n, (vector<bool>(n , false)));
        for(int i = 0; i<n+1; i++) {
            ans[i] = n-i;
        }
        for(int i = n-1; i >=0; i--) {
            for(int j = i; j < n; j++) {
                if(s[j] == s[i] && ((j-i < 2) || isPalindrome[i+1][j-1])) {
                isPalindrome[i][j] = true;
                ans[i] = min(ans[i], ans[j+1] + 1);
                }
            } 
        }
        return ans[0]-1;
    }
};


public class Solution {
    public int minCut(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        boolean[][] isPanlindrome = isPanlindrome(s);
        int[] ans = new int[s.length()+1];
        ans[0] = 0;
        for(int i=1; i<s.length()+1; i++) {
            ans[i] = Integer.MAX_VALUE;
            for(int j=0; j < i; j++) {
                if(isPanlindrome[j][i-1]) {
                    ans[i] = Math.min(ans[i], ans[j]+1);
                }
            }
        }
        return ans[s.length()] - 1;
        
    }
    
    private boolean[][] isPanlindrome(String s) {
        boolean[][] isPanlindrome = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            isPanlindrome[i][i] = true;
        }
        for(int i = 0; i < s.length() - 1; i++) {
            isPanlindrome[i][i+1] = s.charAt(i) == s.charAt(i+1);
        }
        for(int length = 2; length < s.length(); length++) {
            for(int start = 0; start+length < s.length(); start++) {
                isPanlindrome[start][start+length] = isPanlindrome[start+1][start+length-1] && s.charAt(start) == s.charAt(start+length);
            }
        }
        return isPanlindrome;
    }
}
