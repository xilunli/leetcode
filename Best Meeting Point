class Solution {
public:
    int minTotalDistance(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<int> I, J;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    I.push_back(i);
                    J.push_back(j);
                }
            }
        }
        return min1D(I) + min1D(J);
    }
    
    int min1D(vector<int> nums) {
        sort(nums.begin(), nums.end());
        int ans = 0, i = 0, j = nums.size() - 1;
        while(i < j) {
            ans += nums[j--] - nums[i++];
        }
        return ans;
    }
};


public class Solution {
    public int minTotalDistance(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        List<Integer> I = new ArrayList<Integer>();
        List<Integer> J = new ArrayList<Integer>();
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    I.add(i);
                    J.add(j);
                }
            }
        }
        return min1D(I) + min1D(J);
    }
    private int min1D(List<Integer> nums) {
        int ans = 0;
        Collections.sort(nums);
        int i = 0;
        int j = nums.size() - 1;
        while(i < j) {
            ans += nums.get(j--) - nums.get(i++);
        }
        return ans;
    }
}
