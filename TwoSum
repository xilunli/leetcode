class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int, vector<int> > hashMap;
        for (int i = 0; i < nums.size(); i++) {
            hashMap[nums[i]].push_back(i);
        }
        for (int i = 0; i < nums.size(); i++) {
            int val = target - nums[i];
            if (hashMap.count(val) > 0) {
                if(val == nums[i] && hashMap[val].size() > 1) {
                    return {hashMap[val][0],hashMap[val][1]};
                } else if (val != nums[i]) {
                    return {i, hashMap[val][0]};
                }
            }
        }
        return ans;
}
};





public class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,ArrayList<Integer> > myMap = new HashMap<Integer,ArrayList<Integer> >();
        int[] ans = new int[2];
        for (int i = 0; i < nums.length; i++) {
            ArrayList<Integer> list = myMap.get(nums[i]);
            if (list == null) {
                list = new ArrayList<Integer>();
                myMap.put(nums[i], list);
            }
            list.add(i);
        }
        for (int i = 0; i < nums.length; i++) {
            int val = target - nums[i];
            if (myMap.containsKey(val)) {
                if (val == nums[i] && myMap.get(val).size() > 1 ) {
                    ans = new int[] {myMap.get(val).get(0), myMap.get(val).get(1)};
                    return ans;
                } else if (val != nums[i]) {
                    ans = new int[] {i, myMap.get(val).get(0)};
                    return ans;
                }
            }
        }
        return ans;
    }
}
