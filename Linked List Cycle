/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == NULL || head->next == NULL) return false; 
        ListNode* fast = head->next;
        ListNode*slow = head;
        while (slow != fast) {
            if(fast==NULL || fast->next==NULL) return false;
            slow = slow->next;
            fast = fast->next->next;
        }
        return true;
    }
};

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null) return false; 
        ListNode fast = head.next;
        ListNode slow = head;
        while (slow != fast) {
            if(fast==null || fast.next==null)return false;
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }
}
