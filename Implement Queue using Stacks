class Queue {
public:
    // Push element x to the back of queue.
    stack<int> stack1;
    stack<int> stack2;
    void revert() {
        while (!stack1.empty()) {
            stack2.push(stack1.top());
            stack1.pop();
        }
    }
    void push(int x) {
        stack1.push(x);
    }

    // Removes the element from in front of queue.
    void pop(void) {
        if(stack2.empty()) revert();
        stack2.pop();
    }

    // Get the front element.
    int peek(void) {
        if(stack2.empty()) revert();
        return stack2.top();
    }

    // Return whether the queue is empty.
    bool empty(void) {
        if(stack2.empty()) revert();
        return stack2.empty();
    }
};


class MyQueue {
    // Push element x to the back of queue.
    private Stack<Integer> stack1 = new Stack<Integer>();
    private Stack<Integer> stack2 = new Stack<Integer>();
    private void revert() {
        stack2.empty();
        while(!stack1.isEmpty()) {
            stack2.push(stack1.pop());
        }
    }
    public void push(int x) {
        stack1.push(x);
    }

    // Removes the element from in front of queue.
    public void pop() {
        if(stack2.isEmpty()) {
            revert();
        }
        stack2.pop();
    }

    // Get the front element.
    public int peek() {
        if(stack2.isEmpty()) {
            revert();
        }
        return stack2.peek();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        if(stack2.isEmpty()) {
            revert();
        }
        return stack2.isEmpty();
        
    }
}
