/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    struct Comparator {
        bool operator()(ListNode* node1, ListNode* node2) {
            return node2->val < node1->val;
        }  
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) {
            return NULL;
        }
        priority_queue<ListNode*, vector<ListNode*>, Comparator> heap;
        for(int i = 0; i < lists.size(); i++) {
            if(lists[i] != NULL) {
                heap.push(lists[i]);
            }
        }
        ListNode* dummy = new ListNode(0);
        ListNode* tail = dummy;
        while(!heap.empty()) {
            tail->next = heap.top();
            heap.pop();
            if(tail->next->next != NULL) {
                heap.push(tail->next->next);
            }
            tail = tail->next;
        }
        ListNode* head = dummy->next;
        delete dummy;
        return head;
    }
};





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    private Comparator<ListNode> comparator = new Comparator<ListNode>() {
            public int compare(ListNode node1, ListNode node2) {
                return node1.val - node2.val;
            }
        };
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) {
            return null;
        }
        PriorityQueue<ListNode> heap = new PriorityQueue<ListNode>(lists.length, comparator);
        for(int i = 0; i < lists.length; i++) {
            if(lists[i] != null) {
                heap.add(lists[i]);
            }
        }
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while(!heap.isEmpty()) {
            tail.next = heap.poll();
            if(tail.next.next != null) {
                heap.add(tail.next.next);
            }
            tail = tail.next;
        }
        return dummy.next;
        
    }
    
    
}
