class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size();
        int m = s2.size();
        int k = s3.size();
        if(n + m != k) {
            return false;
        }
        vector<vector<bool>> ans(n+1, vector<bool>(m+1));
        for(int i = 0; i < n+1; i++) {
            for(int j = 0; j < m+1; j++) {
                if(i == 0) {
                    ans[i][j] = s2.substr(0, j).compare(s3.substr(0, j)) == 0;
                } else if(j == 0) {
                    ans[i][j] = s1.substr(0, i).compare(s3.substr(0, i)) == 0;
                } else {
                    ans[i][j] = s1[i-1] == s3[i+j-1] && ans[i-1][j] ||
                                s2[j-1] == s3[i+j-1] && ans[i][j-1];
                }
            }
        }
        return ans[n][m];
    }
};


public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int n = s1.length();
        int m = s2.length();
        int k = s3.length();
        if(n + m != k) {
            return false;
        }
        boolean[][] ans = new boolean[n+1][m+1];
        for(int i = 0; i < n +1; i++) {
            for(int j = 0; j < m+1; j++) {
                if(i == 0) {
                    ans[i][j] = s2.substring(0, j).equals(s3.substring(0, j));
                } else if(j == 0) {
                    ans[i][j] = s1.substring(0, i).equals(s3.substring(0, i));
                } else {
                     ans[i][j] = s1.charAt(i-1) == s3.charAt(i+j-1) && ans[i-1][j] || s2.charAt(j-1) == s3.charAt(i+j-1) && ans[i][j-1];
                }
            }
        }
        return ans[n][m];
    }
}
