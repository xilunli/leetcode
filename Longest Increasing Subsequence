class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size() == 0) {
            return 0;
        }
        vector<int> tails(nums.size(), INT_MAX);
        int ans = 1;
        for(int i = 0; i < nums.size(); i++) {
            int start = 0, end = ans;
            while(start +1 < end) {
                int mid = (end - start)/2 + start;
                if(tails[mid] > nums[i]) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
            if(tails[start] >= nums[i]) {
                tails[start] = nums[i];
            }else{
                tails[end] = nums[i];
                if(end == ans) {
                    ans++;
                }
            }

        }
        return ans;
    }
};




public class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        int n = nums.length;
        int[] ans = new int[n];
        int max = 0;
        for(int i = 0; i< n; i++) {
            ans[i] = 1;
            for(int j = 0; j <i; j++) {
                if(nums[j] < nums[i] && ans[j] + 1 > ans[i]) {
                    ans[i] = ans[j] + 1;
                }
            }
            if(ans[i] > max) {
                max = ans[i];
            }
        }
        return max;
    }
}
