class Solution {
public:
    bool wordBreak(string s, unordered_set<string>& wordDict) {
        int n = s.size();
        if(n == 0) {
            return false;
        }
        vector<bool> ans(n+1, false);
        ans[0] = true;
        for(int i = 1; i < n+1; i++) {
            for(int j = 0; j < i; j++) {
                ans[i] = ans[i] || ans[j] && wordDict.count(s.substr(j, i-j)) > 0;
            }
        }
        return ans[n];
    }
};


public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        int n = s.length();
        if(s == null || n == 0) {
            return true;
        }
        boolean[] ans = new boolean[n+1];
        ans[0] = true;
        for(int i = 1; i< n+1; i++) {
            for(int j = 0; j < i; j++) {
                ans[i] = ans[i] || ans[j] && wordDict.contains(s.substring(j, i));  
            }
        }
        return ans[n];
    }
}
