class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<string> tmpAns;
        vector<vector<string>> ans;
        getAns(0, s, tmpAns, ans);
        return ans;
    }
    void getAns(int start, string s, vector<string> &tmpAns, vector<vector<string>> &ans) {
        if(start == s.size()) {
            ans.push_back(tmpAns);
            return;
        }
        for(int i = start; i< s.size(); i++) {
            string sub = s.substr(start, i-start + 1);
            if(isPanlidrome(sub)){
                tmpAns.push_back(sub);
                getAns(i+1, s, tmpAns, ans);
                tmpAns.pop_back();
            }
        }
    }
    bool isPanlidrome(string s) {
        int start = 0, end = s.size()-1;
        while(start < end) {
            if(s[start++] != s[end--]) {
                return false;
            }
        }
        return true;
    }
};



public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<List<String>>();
        List<String> tmpAns = new ArrayList<String>();
        if(s == null || s.length() == 0) {
            return ans;
        }
        int n = s.length();
        boolean[][] isPanlidrome = new boolean[n][n];
        for(int i = 0; i < n; i++) {
            isPanlidrome[i][i] = true;
        }
        for(int i = 0; i < n-1; i++) {
            isPanlidrome[i][i+1] = s.charAt(i) == s.charAt(i+1);
        }
        for(int i = 2; i < n; i++) {
            for(int j = 0; j +i < n; j++ ) {
                isPanlidrome[j][j+i] = isPanlidrome[j+1][j+i-1] && s.charAt(j) == s.charAt(j+i);
            }
        }
        getAns(0, s, ans, tmpAns, isPanlidrome);
        return ans;
    }
    private void getAns(int start, String s, List<List<String>> ans, List<String> tmpAns, boolean[][] isPanlidrome) {
        if(start == s.length()) {
            ans.add(new ArrayList<String>(tmpAns));
            return;
        }
        for(int i = start; i < s.length(); i++) {
            if(isPanlidrome[start][i]) {
                tmpAns.add(s.substring(start, i+1));
                getAns(i+1, s, ans, tmpAns, isPanlidrome);
                tmpAns.remove(tmpAns.size() - 1);
            }
        }
    }
    
}
