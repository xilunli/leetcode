class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> myMap;
        for(int n: nums) {
            myMap[n]++;
        }
        priority_queue<pair<int,int>> myQueue;
        for(pair<int, int> pair: myMap) {
            myQueue.push({pair.second, pair.first});
        }
        vector<int> ans;
        for(int i=0; i<k; i++) {
            ans.push_back(myQueue.top().second);
            myQueue.pop();
        }
        return ans;
    }
};



public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();
        Map<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
        PriorityQueue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<Map.Entry<Integer, Integer>>(
            new Comparator<Map.Entry<Integer, Integer>>() {
                public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2) {
                    return e1.getValue() - e2.getValue();
                }
            }
        );
        for(int i=0; i<nums.length; i++) {
            if(!myMap.containsKey(nums[i])) {
                myMap.put(nums[i], 1);
            }else {
                myMap.put(nums[i], myMap.get(nums[i])+1 );
            }
        }
        for (Map.Entry<Integer, Integer> entry : myMap.entrySet()) {
            if (queue.size() < k) {
                queue.offer(entry);
            } else if (queue.peek().getValue() < entry.getValue()) {
                queue.poll();
                queue.offer(entry);
            }
        }
        List<Integer> ans = new ArrayList<Integer>();
        for(int i=0; i<k; i++) {
            ans.add(queue.poll().getKey());
        }
        return ans;
    }
}
