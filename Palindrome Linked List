/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head||!head->next) return true;
        ListNode *slow=head, *fast=head;
        while(fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *newStart= NULL, *node = slow->next;
        while(node) {
            ListNode *tmp=node->next;
            node->next = newStart;
            newStart = node;
            node = tmp;
        }
        while(newStart){
            if(newStart->val != head->val) return false;
            newStart = newStart->next;
            head = head->next;
        }
        return true;
    }
};


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null) return true;
        ListNode slow=head, fast=head;
        while(fast.next!=null && fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        ListNode newStart = slow.next;
        ListNode prev=null;
        while(newStart!=null){
            ListNode tmp = newStart.next;
            newStart.next = prev;
            prev =newStart;
            newStart = tmp;
        }
        while(prev!=null){
            if(prev.val != head.val) return false;
            prev=prev.next;
            head=head.next;
        }
        return true;
    }
}
