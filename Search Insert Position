class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        if(nums.size()==0){
            return 0;
        }
        int start = 0, end = nums.size()-1;
        while(start + 1 < end) {
            int mid = start + (end -start)/2;
            if(target == nums[mid]) {
                return mid;
            } else if(target < nums[mid]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if(target <= nums[start]) {
            return start;
        } else if(target <= nums[end]) {
            return end;
        } else {
            return end +1;
        }
    }
};



public class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums == null || nums.length==0){
            return 0;
        }
        int start = 0, end = nums.length-1;
        while(start + 1 < end) {
            int mid = start + (end -start)/2;
            if(target == nums[mid]) {
                return mid;
            } else if(target < nums[mid]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if(target <= nums[start]) {
            return start;
        } else if(target <= nums[end]) {
            return end;
        } else {
            return end +1;
        }
    }
}
