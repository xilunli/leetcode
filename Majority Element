class Solution {
public:
    int majorityElement(vector<int>& nums) {
        if(nums.size() == 1 || nums.size() == 2) return nums[0];
        unordered_map<int,int> myMap;
        for (int i = 0; i < nums.size(); i++) {
            if(myMap.count(nums[i]) > 0) {
                myMap[nums[i]] += 1;
            } else {
                myMap[nums[i]] = 1;
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if(myMap[nums[i]] > nums.size()/2) return nums[i];
        }
        return -1;
    }
};


public class Solution {
    public int majorityElement(int[] nums) {
        if (nums.length == 1 || nums.length == 2) return nums[0];
        Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++) {
            if(!myMap.containsKey(nums[i])) myMap.put(nums[i],1);
            else myMap.put(nums[i], myMap.get(nums[i]) + 1);
        }
        for (Integer key: myMap.keySet()) {
            if (myMap.get(key) > nums.length/2) return key;
        }
        return -1;
    }
    
}
